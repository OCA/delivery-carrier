-
  In order to test Carrier file generation
-
  I set the system tempfile on the carrier file configuration to be sure the path will be writable
-
  !python {model: delivery.carrier.file, id: delivery_carrier_file}: |
    import tempfile
    self.write({'export_path': tempfile.gettempdir(), 'write_mode': 'disk'})
-
  I set the carrier file configuration on the carrier Free delivery charges
-
  !record {model: delivery.carrier, id: delivery.delivery_carrier}:
    carrier_file_id: delivery_carrier_file
-
  I confirm outgoing shipment of 130 kgm Ice-cream.
-
  !python {model: stock.picking, id: outgoing_shipment_carrier_file}: |
    self.action_confirm()
-
  I check outgoing shipment after stock availablity in refrigerator.
-
  !python {model: stock.picking, id: outgoing_shipment_carrier_file}: |
    self.force_assign()
-
  I deliver outgoing shipment.
-
  !python {model: stock.transfer_details}: |
    context.update({'active_model': 'stock.picking', 'active_id': ref('outgoing_shipment_carrier_file'), 'active_ids': [ref('outgoing_shipment_carrier_file')]})
-
  !record {model: stock.transfer_details, id: partial_outgoing}:
    picking_id: outgoing_shipment_carrier_file
-
  I transfer the shipment.
-
  !python {model: stock.transfer_details}: |
    self.do_detailed_transfer(cr, uid, [ref('partial_outgoing')], context=context)
-
  I check shipment details after shipment, the carrier file must have been generated
-
  !assert {model: stock.picking, id: outgoing_shipment_carrier_file, string: Carrier file should be generated}:
    - carrier_file_generated == True
-
  I check outgoing shipment copy, the carrier_file_generated field must be unchecked
-
  !python {model: stock.picking, id: outgoing_shipment_carrier_file}: |
    new_id = self.copy()
    assert new_id.carrier_file_generated == False, "After duplication, the file generated checkbox is unchecked"
